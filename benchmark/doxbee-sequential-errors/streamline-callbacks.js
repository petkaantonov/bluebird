/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; require("../lib/fakes");

module.exports = function upload(stream, idOrPath, tag, _) { var blob, tx, blobId, file, previousId, splitPath, fileName, query; var __frame = { name: "upload", line: 3 }; return __func(_, this, arguments, upload, 3, __frame, function __$upload() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$upload() {

          blob = blobManager.create(account);
          tx = db.begin();
          return blob.put(stream, __cb(_, __frame, 4, 26, function ___(__0, __1) { blobId = __1;
            return self.byUuidOrPath(idOrPath).get(__cb(_, __frame, 5, 47, function ___(__0, __2) { file = __2;

              previousId = (file ? file.version : null);
              version = {
                userAccountId: userAccount.id,
                date: new Date(),
                blobId: blobId,
                creatorId: userAccount.id,
                previousId: previousId };

              version.id = Version.createHash(version);
              return Version.insert(version).execWithin(tx, __cb(_, __frame, 16, 32, function __$upload() {
                triggerIntentionalError(); return (function __$upload(__then) {
                  if (!file) {
                    splitPath = idOrPath.split("/");
                    fileName = splitPath[(splitPath.length - 1)];
                    file = {
                      id: uuid.v1(),
                      userAccountId: userAccount.id,
                      name: fileName,
                      version: version.id };

                    return self.createQuery(idOrPath, file, __cb(_, __frame, 27, 29, function ___(__0, __3) { query = __3;
                      return query.execWithin(tx, __cb(_, __frame, 28, 18, function __$upload() {
                        triggerIntentionalError(); __then(); }, true)); }, true)); } else { __then(); } ; })(function __$upload() {


                  return FileVersion.insert({ fileId: file.id, versionId: version.id }).execWithin(tx, __cb(_, __frame, 32, 13, function __$upload() {
                    triggerIntentionalError();

                    return File.whereUpdate({ id: file.id }, { version: version.id }).execWithin(tx, __cb(_, __frame, 35, 13, function __$upload() {
                      triggerIntentionalError();
                      tx.commit(); __then(); }, true)); }, true)); }); }, true)); }, true)); }, true)); }); })(function ___(err, __result) { __catch(function __$upload() { if (err) {

            tx.rollback();
            return _(err); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$upload() { _(); }); }); });};
