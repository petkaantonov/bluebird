/*** Generated by streamline 0.10.17 (generators) - DO NOT EDIT ***/var galaxy = require("streamline/lib/generators/runtime");(function(){})();(galaxy.unstar(function*(_) { require('../lib/fakes');

module.exports = galaxy.unstar(function* upload(stream, idOrPath, tag, _) {
    try {
        var blob = blobManager.create(account);
        var tx = db.begin();
        var blobId = (yield galaxy.invoke(blob, "put", [stream, _], 1));
        var file = (yield galaxy.invoke(self.byUuidOrPath(idOrPath), "get", [_], 0));

        var previousId = file ? file.version : null;
        version = {
            userAccountId: userAccount.id,
            date: new Date(),
            blobId: blobId,
            creatorId: userAccount.id,
            previousId: previousId,
        };
        version.id = Version.createHash(version);
        (yield galaxy.invoke(Version.insert(version), "execWithin", [tx, _], 1));
        triggerIntentionalError();
        if (!file) {
            var splitPath = idOrPath.split('/');
            var fileName = splitPath[splitPath.length - 1];
            file = {
                id: uuid.v1(),
                userAccountId: userAccount.id,
                name: fileName,
                version: version.id
            };
            var query = (yield galaxy.invoke(self, "createQuery", [idOrPath, file, _], 2));
            (yield galaxy.invoke(query, "execWithin", [tx, _], 1));
            triggerIntentionalError();
        }
        (yield galaxy.invoke(FileVersion.insert({fileId: file.id, versionId: version.id}), "execWithin", [
            tx, _], 1));
        triggerIntentionalError();
        (yield galaxy.invoke(File.whereUpdate({id: file.id}, {version: version.id}), "execWithin", [
            tx, _], 1));
        triggerIntentionalError();
        tx.commit();
    } catch (err) {
        tx.rollback();
        throw err;
    }
}, 3);
}, 0).call(this, function(err) {
  if (err) throw err;
}));
